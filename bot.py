import telebot
from telebot import types, apihelper
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import sqlite3
import time
import random
import os
import logging
import re
import sys
import socket
import atexit
from dotenv import load_dotenv
import signal
import traceback
from keep_alive import start_keep_alive_thread

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –í–∫–ª—é—á–∞–µ–º middleware
apihelper.ENABLE_MIDDLEWARE = True

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserStates:
    START = 'start'
    WAITING_NAME = 'waiting_name'
    WAITING_MEDIA = 'waiting_media'
    PREVIEW_SUBMISSION = 'preview_submission'
    WAITING_VOTES_COUNT = 'waiting_votes_count'
    WAITING_TOURNAMENT_TIME = 'waiting_tournament_time'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
token = os.environ.get('TOKEN', '8104692415:AAEFJiYdW85sXaAa4PFd-uOEcJZIBQfd31Q')
bot = telebot.TeleBot(token)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 1758948212  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
ALLOWED_USERS = [ADMIN_ID]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω

def create_admin_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üé≠ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü")
    btn3 = types.KeyboardButton("‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É")
    btn_admin = types.KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    btn_help = types.KeyboardButton("üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ")
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn_admin)
    markup.row(btn_help)
    return markup

def create_user_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üé≠ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü")
    btn3 = types.KeyboardButton("‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É")
    btn_help = types.KeyboardButton("üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ")
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn_help)
    return markup

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_state(user_id):
    return user_states.get(user_id, UserStates.START)

def set_user_state(user_id, state):
    user_states[user_id] = state

def init_db():
    conn = sqlite3.connect('facemash.db')
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS suggestions
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         name TEXT NOT NULL,
         file_id TEXT NOT NULL,
         media_type TEXT NOT NULL,
         suggested_by INTEGER NOT NULL,
         status TEXT DEFAULT 'pending',
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    c.execute('''
        CREATE TABLE IF NOT EXISTS photos
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         name TEXT NOT NULL,
         file_id TEXT NOT NULL,
         approved INTEGER DEFAULT 0,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ media_type –≤ —Ç–∞–±–ª–∏—Ü–µ photos
    try:
        c.execute("SELECT media_type FROM photos LIMIT 1")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ media_type –≤ —Ç–∞–±–ª–∏—Ü—É photos")
        c.execute("ALTER TABLE photos ADD COLUMN media_type TEXT DEFAULT 'photo'")
        logger.info("–°—Ç–æ–ª–±–µ—Ü media_type –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ votes –≤ —Ç–∞–±–ª–∏—Ü–µ photos
    try:
        c.execute("SELECT votes FROM photos LIMIT 1")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ votes –≤ —Ç–∞–±–ª–∏—Ü—É photos")
        c.execute("ALTER TABLE photos ADD COLUMN votes INTEGER DEFAULT 0")
        logger.info("–°—Ç–æ–ª–±–µ—Ü votes –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤
    c.execute('''
        CREATE TABLE IF NOT EXISTS user_votes
        (user_id INTEGER NOT NULL,
         photo_id INTEGER NOT NULL,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
         PRIMARY KEY (user_id, photo_id))
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞
    c.execute('''
        CREATE TABLE IF NOT EXISTS tournament_settings
        (id INTEGER PRIMARY KEY AUTOINCREMENT,
         required_votes INTEGER NOT NULL,
         tournament_duration INTEGER NOT NULL,
         is_active INTEGER DEFAULT 0,
         current_tournament_start TIMESTAMP,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
    ''')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–æ 15 –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã —Å required_votes = 100
        c.execute("SELECT id FROM tournament_settings WHERE is_active = 1 AND required_votes = 100")
        if c.fetchone():
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–æ 15 –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
            c.execute("UPDATE tournament_settings SET required_votes = 15 WHERE is_active = 1 AND required_votes = 100")
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {c.rowcount}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤: {e}")
    
    conn.commit()
    conn.close()
    
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

@bot.message_handler(commands=['propose'])
def start_proposal(message):
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã")
        
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not check_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            channel_btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/Simpatia_Liven57")
            check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            markup.add(channel_btn)
            markup.add(check_btn)
            
            bot.reply_to(
                message,
                "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Simpatia_Liven57",
                reply_markup=markup
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ALLOWED_USERS:
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if get_user_state(user_id) != UserStates.START:
            bot.reply_to(message, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        set_user_state(user_id, UserStates.WAITING_NAME)
        user_data[user_id] = {}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        markup.add(cancel_btn)
        
        bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_proposal: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserStates.WAITING_NAME)
def handle_name(message):
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if not check_subscription(user_id):
            send_subscription_message(message.chat.id)
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
            
        name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if name.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞":
            cancel_proposal(message)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
        if len(name) < 2 or len(name) > 50:
            bot.send_message(message.chat.id, "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
        if not re.match(r"^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s-]+$", name, re.UNICODE):
            bot.reply_to(message, "–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –º–µ–¥–∏–∞
        user_data[user_id]['name'] = name
        set_user_state(user_id, UserStates.WAITING_MEDIA)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        markup.add(cancel_btn)
        
        bot.reply_to(
            message,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_name: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏")
        
@bot.message_handler(content_types=['photo', 'video'], func=lambda message: get_user_state(message.from_user.id) == UserStates.WAITING_MEDIA)
def handle_media(message):
    try:
        user_id = message.from_user.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if not check_subscription(user_id):
            send_subscription_message(message.chat.id)
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            logging.warning(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            user_data[user_id] = {}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if 'name' not in user_data[user_id]:
            logging.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∏–º–µ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /propose")
            set_user_state(user_id, UserStates.START)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏ —Ç–∏–ø –º–µ–¥–∏–∞
        if message.content_type == 'photo':
            if not message.photo or len(message.photo) == 0:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
                
            file_id = message.photo[-1].file_id
            media_type = 'photo'
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, file_id: {file_id}")
        else:  # video
            if not hasattr(message, 'video') or not message.video:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
                
            file_id = message.video.file_id
            media_type = 'video'
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, file_id: {file_id}")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        user_data[user_id]['file_id'] = file_id
        user_data[user_id]['media_type'] = media_type
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        name = user_data[user_id]['name']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–≤—å—é
        markup = types.InlineKeyboardMarkup(row_width=2)
        edit_name_btn = types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")
        edit_media_btn = types.InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media")
        send_btn = types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_proposal")
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_proposal")
        
        markup.add(edit_name_btn, edit_media_btn)
        markup.add(send_btn, cancel_btn)
        
        caption = f"üìù –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\nüë§ –ò–º—è: {name}\nüìé –¢–∏–ø –º–µ–¥–∏–∞: {'–§–æ—Ç–æ' if media_type == 'photo' else '–í–∏–¥–µ–æ'}"
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            if 'preview_message_id' in user_data[user_id]:
                try:
                    bot.delete_message(message.chat.id, user_data[user_id]['preview_message_id'])
                except Exception as del_err:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–≤—å—é: {del_err}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–≤—å—é
            sent_msg = None
            if media_type == 'photo':
                try:
                    sent_msg = bot.send_photo(message.chat.id, file_id, caption=caption, reply_markup=markup)
                except telebot.apihelper.ApiException as api_err:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {api_err}")
                    bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                    return
            else:
                try:
                    sent_msg = bot.send_video(message.chat.id, file_id, caption=caption, reply_markup=markup)
                except telebot.apihelper.ApiException as api_err:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {api_err}")
                    bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
                    return
                
            if sent_msg:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–≤—å—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                user_data[user_id]['preview_message_id'] = sent_msg.message_id
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é - sent_msg is None")
                bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
        except telebot.apihelper.ApiException as api_err:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {api_err}")
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–≤—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ–¥–∏–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        except Exception as gen_err:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {gen_err}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–≤—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "üëÜ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        set_user_state(user_id, UserStates.PREVIEW_SUBMISSION)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_media: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            set_user_state(message.from_user.id, UserStates.START)
            user_data.pop(message.from_user.id, None)
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data in ["edit_name", "edit_media", "send_proposal", "cancel_proposal"])
def handle_preview_buttons(call):
    try:
        user_id = call.from_user.id
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if not check_subscription(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!")
            send_subscription_message(call.message.chat.id)
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            logging.warning(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ {call.data}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /propose")
            return
            
        if call.data == "edit_name":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
            set_user_state(user_id, UserStates.WAITING_NAME)
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
            markup.add(cancel_btn)
            
            bot.send_message(
                call.message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
                reply_markup=markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        elif call.data == "edit_media":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞
            set_user_state(user_id, UserStates.WAITING_MEDIA)
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            cancel_btn = types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
            markup.add(cancel_btn)
            
            bot.send_message(
                call.message.chat.id,
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —É—á–∞—Å—Ç–Ω–∏—Ü—ã:",
                reply_markup=markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
        elif call.data == "send_proposal":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not user_data.get(user_id):
                logger.warning(f"user_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—É—Å—Ç—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /propose")
                return
                
            required_fields = ['name', 'file_id', 'media_type']
            missing_fields = [field for field in required_fields if field not in user_data[user_id]]
            
            if missing_fields:
                logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing_fields} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {', '.join(missing_fields)}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            name = user_data[user_id]['name']
            file_id = user_data[user_id]['file_id']
            media_type = user_data[user_id]['media_type']
            
            conn = None
            try:
                conn = sqlite3.connect('facemash.db')
                c = conn.cursor()
                
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {name}, {media_type}")
                
                c.execute("""
                    INSERT INTO suggestions (name, file_id, media_type, suggested_by, status)
                    VALUES (?, ?, ?, ?, 'pending')
                """, (name, file_id, media_type, user_id))
                
                suggestion_id = c.lastrowid
                conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                admin_markup = types.InlineKeyboardMarkup(row_width=2)
                accept_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_suggestion_{suggestion_id}")
                reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_suggestion_{suggestion_id}")
                admin_markup.add(accept_btn, reject_btn)
                
                admin_caption = f"üìù –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\nüë§ –ò–º—è: {name}\nüë§ –û—Ç: {user_id}"
                
                try:
                    if media_type == 'photo':
                        bot.send_photo(ADMIN_ID, file_id, caption=admin_caption, reply_markup=admin_markup)
                    else:
                        bot.send_video(ADMIN_ID, file_id, caption=admin_caption, reply_markup=admin_markup)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
                    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                set_user_state(user_id, UserStates.START)
                user_data.pop(user_id, None)
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                try:
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    
                bot.send_message(
                    call.message.chat.id,
                    "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                
                bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                
            except sqlite3.Error as db_err:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ handle_preview_buttons: {db_err}")
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                if conn:
                    conn.rollback()
                return
            finally:
                if conn:
                    conn.close()
            
        elif call.data == "cancel_proposal":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            cancel_proposal_callback(call)
            bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_preview_buttons: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if 'user_id' in locals():
                set_user_state(user_id, UserStates.START)
                user_data.pop(user_id, None)
        except:
            pass

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
def cancel_proposal_callback(call):
    try:
        user_id = call.from_user.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_state(user_id, UserStates.START)
        user_data.pop(user_id, None)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–≤—å—é
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
            
        bot.send_message(
            call.message.chat.id,
            "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_proposal_callback: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def check_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if user_id == ADMIN_ID:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        channel_username = 'Simpatia_Liven57'
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
            chat_member = bot.get_chat_member(f'@{channel_username}', user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            member_status = chat_member.status
            if member_status in ['creator', 'administrator', 'member']:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª (—Å—Ç–∞—Ç—É—Å: {member_status})")
                return True
            else:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª (—Å—Ç–∞—Ç—É—Å: {member_status})")
                return False
                
        except telebot.apihelper.ApiException as api_err:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ)
            logger.error(f"–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {api_err}")
            
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def send_subscription_message(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: False (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ return)
    """
    try:
        markup = types.InlineKeyboardMarkup(row_width=1)
        channel_btn = types.InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/Simpatia_Liven57")
        check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        markup.add(channel_btn)
        markup.add(check_btn)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_send_message –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        bot.send_message(
            chat_id,
            "‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç!</b>\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Simpatia_Liven57\n\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª\n"
            "2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
            "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª",
            parse_mode="HTML",
            reply_markup=markup
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bot.send_message(
                chat_id,
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Simpatia_Liven57"
            )
        except:
            pass
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith(('accept_suggestion_', 'reject_suggestion_')))
def handle_suggestion_decision(call):
    conn = None
    try:
        if call.from_user.id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ callback_data
        parts = call.data.split('_')
        if len(parts) < 3:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {call.data}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        action = parts[0]
        suggestion_id = int(parts[2])
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {action} –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}")
        
        conn = sqlite3.connect('facemash.db')
        conn.row_factory = sqlite3.Row  # –î–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        c.execute("""
            SELECT name, file_id, media_type, suggested_by, status
            FROM suggestions 
            WHERE id = ?
        """, (suggestion_id,))
        
        suggestion = c.fetchone()
        
        if not suggestion:
            logger.error(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å ID {suggestion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            bot.answer_callback_query(call.id, "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        name = suggestion['name']
        file_id = suggestion['file_id']
        media_type = suggestion['media_type']
        suggested_by = suggestion['suggested_by']
        status = suggestion['status']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if status != 'pending':
            bot.answer_callback_query(call.id, "–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return
        
        if action == 'accept':
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                c.execute("""
                    INSERT INTO photos (name, file_id, media_type, approved)
                    VALUES (?, ?, ?, 1)
                """, (name, file_id, media_type))
                
                # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                photo_id = c.lastrowid
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å ID {photo_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                c.execute("UPDATE suggestions SET status = 'accepted' WHERE id = ?", (suggestion_id,))
                
                conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(
                        suggested_by,
                        f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã {name} –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {suggested_by}: {e}")
                
                bot.answer_callback_query(call.id, f"–£—á–∞—Å—Ç–Ω–∏—Ü–∞ {name} –ø—Ä–∏–Ω—è—Ç–∞!")
                bot.send_message(call.message.chat.id, f"‚úÖ –£—á–∞—Å—Ç–Ω–∏—Ü–∞ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç—É—Ä–Ω–∏—Ä!")
                
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                if conn:
                    conn.rollback()
                return
                
        else:  # reject
            try:
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                c.execute("UPDATE suggestions SET status = 'rejected' WHERE id = ?", (suggestion_id,))
                conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(
                        suggested_by,
                        f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã {name} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {suggested_by}: {e}")
                
                bot.answer_callback_query(call.id, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                bot.send_message(call.message.chat.id, f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã {name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
                
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                if conn:
                    conn.rollback()
                return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_suggestion_decision: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def cancel_proposal(message):
    try:
        user_id = message.from_user.id
        logger.info(f"–û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_state(user_id, UserStates.START)
        user_data.pop(user_id, None)
        
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_proposal: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

# –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    try:
        user_id = message.from_user.id
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        if user_id in user_states and user_states[user_id] != UserStates.START:
            logger.info(f"–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å {user_states[user_id]} –Ω–∞ START")
            set_user_state(user_id, UserStates.START)
            user_data.pop(user_id, None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not check_subscription(user_id):
            send_subscription_message(message.chat.id)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = create_admin_markup() if user_id == ADMIN_ID else create_user_markup()
        
        bot.send_message(
            message.chat.id,
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω–∫—É—Ä—Å–∞ –∫—Ä–∞—Å–æ—Ç—ã!</b>\n\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"üé≠ <b>–ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</b> - —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ\n"
            f"üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏—Ü\n"
            f"‚ûï <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É</b> - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —É—á–∞—Å—Ç–Ω–∏—Ü—É",
            parse_mode="HTML",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin_command(message):
    try:
        user_id = message.from_user.id
        
        if user_id != ADMIN_ID:
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        conn = None
        try:
            conn = sqlite3.connect('facemash.db')
            c = conn.cursor()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏—Ü
            c.execute("SELECT COUNT(*) FROM photos WHERE approved = 1")
            participants_count = c.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            c.execute("SELECT COUNT(*) FROM suggestions WHERE status = 'pending'")
            pending_count = c.fetchone()[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
            c.execute("SELECT is_active FROM tournament_settings WHERE is_active = 1")
            tournament_active = bool(c.fetchone())
            
            conn.close()
        except:
            participants_count = "?"
            pending_count = "?"
            tournament_active = False
            if conn:
                conn.close()
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏—Ü–∞–º–∏
        header1 = types.InlineKeyboardButton("üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–¶–ê–ú–ò", callback_data="admin_header1")
        btn1 = types.InlineKeyboardButton(f"üì• –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({pending_count})", callback_data="admin_suggestions")
        btn2 = types.InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É", callback_data="admin_delete")
        btn3 = types.InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏—Ü", callback_data="admin_view_all")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–º
        header2 = types.InlineKeyboardButton("üèÜ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–†–ù–ò–†–û–ú", callback_data="admin_header2")
        btn4 = types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        btn5 = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞", callback_data="admin_tournament_settings")
        
        # –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞
        if tournament_active:
            btn6 = types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="stop_tournament")
        else:
            btn6 = types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="start_tournament")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        header3 = types.InlineKeyboardButton("üõ† –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò", callback_data="admin_header3")
        btn7 = types.InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")
        btn8 = types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="admin_restart")
        btn9 = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª—ã
        markup.add(header1)
        markup.row(btn1, btn2)
        markup.add(btn3)
        
        markup.add(header2)
        markup.row(btn4, btn5)
        markup.add(btn6)
        
        markup.add(header3)
        markup.row(btn7, btn8)
        markup.add(btn9)
        
        status_emoji = "‚úÖ" if tournament_active else "‚ùå"
        
        bot.reply_to(
            message,
            f"üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏—Ü: {participants_count}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_count}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞: {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if tournament_active else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_command: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@bot.message_handler(commands=['cancel'])
def cancel_command(message):
    try:
        user_id = message.from_user.id
        cancel_proposal(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_command: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è")

# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if not check_subscription(user_id):
            send_subscription_message(message.chat.id)
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
            
        if message.text == "üé≠ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ":
            start_voting(message)
        elif message.text == "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü" or message.text == "üìä –¢–æ–ø —Ñ–æ—Ç–æ":
            show_top(message)
        elif message.text == "‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü—É":
            start_proposal(message)
        elif message.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
            if user_id == ADMIN_ID:
                admin_command(message)
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        elif message.text == "üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ":
            handle_report_bug(message)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states and user_id in user_data:
                handle_user_state(message)
            else:
                bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: message.text == "üîß –°–æ–æ–±—â–∏—Ç—å –æ –ø–æ–ª–æ–º–∫–µ")
def handle_report_bug(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–æ–º–∫–µ"""
    try:
        markup = types.InlineKeyboardMarkup()
        contact_button = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", url="https://t.me/cloudysince")
        markup.add(contact_button)
        
        bot.reply_to(
            message,
            "–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, "
            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª–æ–º–∫–µ: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@bot.message_handler(func=lambda message: message.text == "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü")
def show_top(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not check_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            channel_btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/Simpatia_Liven57")
            check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            markup.add(channel_btn)
            markup.add(check_btn)
            
            bot.reply_to(
                message,
                "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Simpatia_Liven57",
                reply_markup=markup
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ALLOWED_USERS:
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        c.execute("""
            SELECT p.id, p.name, p.file_id, p.media_type, p.votes
            FROM photos p
            WHERE p.approved = 1
            ORDER BY p.votes DESC
            LIMIT 3
        """)
        
        top_participants = c.fetchall()
        conn.close()
        
        if not top_participants:
            bot.reply_to(message, "üèÜ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        bot.send_message(
            message.chat.id,
            "üèÜ *–¢–û–ü-3 –£–ß–ê–°–¢–ù–ò–¶*\n\n"
            "_–£—á–∞—Å—Ç–Ω–∏—Ü—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤:_",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —É—á–∞—Å—Ç–Ω–∏—Ü–µ
        for i, (photo_id, name, file_id, media_type, votes) in enumerate(top_participants, 1):
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}[i]
            caption = f"{medal} *{i} –º–µ—Å—Ç–æ*\nüë§ {name}\nüìä –ì–æ–ª–æ—Å–æ–≤: {votes}"
            
            try:
                if media_type == 'photo':
                    bot.send_photo(message.chat.id, file_id, caption=caption, parse_mode="Markdown")
                elif media_type == 'video':
                    bot.send_video(message.chat.id, file_id, caption=caption, parse_mode="Markdown")
            except Exception as media_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã {name}: {media_error}")
                bot.send_message(
                    message.chat.id,
                    f"{caption}\n\n‚ùå _–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞_",
                    parse_mode="Markdown"
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏—Ü.")

def start_voting(message):
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if not check_subscription(user_id):
            markup = types.InlineKeyboardMarkup()
            channel_btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/Simpatia_Liven57")
            check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            markup.add(channel_btn)
            markup.add(check_btn)
            
            bot.reply_to(
                message,
                "‚õî –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @Simpatia_Liven57",
                reply_markup=markup
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in ALLOWED_USERS:
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        c.execute("SELECT id FROM tournament_settings WHERE is_active = 1")
        tournament = c.fetchone()
        
        if not tournament:
            bot.reply_to(message, "üö´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞")
            conn.close()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–≤–µ —Å–ª—É—á–∞–π–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã
        c.execute("""
            SELECT p.id, p.name, p.file_id, p.media_type, p.votes
            FROM photos p
            WHERE p.approved = 1
            AND NOT EXISTS (
                SELECT 1 FROM user_votes v
                WHERE v.user_id = ? AND v.photo_id = p.id
            )
            ORDER BY RANDOM()
            LIMIT 2
        """, (user_id,))
        
        participants = c.fetchall()
        conn.close()
        
        if len(participants) < 2:
            bot.reply_to(message, "üèÅ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏—Ü!")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        for participant in participants:
            part_id, name, file_id, media_type, votes = participant
            
            markup = types.InlineKeyboardMarkup()
            vote_btn = types.InlineKeyboardButton("üëç –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data=f"vote_{part_id}")
            markup.add(vote_btn)
            
            caption = f"üë§ {name}\nüìä –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞: {votes}"
            
            if media_type == 'photo':
                bot.send_photo(message.chat.id, file_id, caption=caption, reply_markup=markup)
            else:
                bot.send_video(message.chat.id, file_id, caption=caption, reply_markup=markup)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_voting: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('vote_'))
def handle_vote(call):
    conn = None
    try:
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if not check_subscription(user_id):
            bot.answer_callback_query(call.id, "‚õî –î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            send_subscription_message(call.message.chat.id)
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if user_id not in ALLOWED_USERS:
            ALLOWED_USERS.append(user_id)
        
        photo_id = int(call.data.split('_')[1])
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        cursor.execute("SELECT id FROM tournament_settings WHERE is_active = 1")
        if not cursor.fetchone():
            bot.answer_callback_query(call.id, "üö´ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ —Ñ–æ—Ç–æ
        cursor.execute("SELECT id FROM user_votes WHERE user_id = ? AND photo_id = ?", (user_id, photo_id))
        if cursor.fetchone():
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç—É —É—á–∞—Å—Ç–Ω–∏—Ü—É!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã
        cursor.execute("SELECT id, name FROM photos WHERE id = ? AND approved = 1", (photo_id,))
        photo_data = cursor.fetchone()
        if not photo_data:
            bot.answer_callback_query(call.id, "–£—á–∞—Å—Ç–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞")
            return
            
        photo_name = photo_data[1]
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
        cursor.execute("INSERT INTO user_votes (user_id, photo_id) VALUES (?, ?)", (user_id, photo_id))
        cursor.execute("UPDATE photos SET votes = votes + 1 WHERE id = ?", (photo_id,))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
        cursor.execute("""
            SELECT p.votes, t.required_votes 
            FROM photos p, tournament_settings t 
            WHERE p.id = ? AND t.is_active = 1
        """, (photo_id,))
        
        result = cursor.fetchone()
        if result:
            votes, required = result
            
            conn.commit()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            
            if votes >= required:
                check_tournament_completion()
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
            bot.send_message(call.message.chat.id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —É—á–∞—Å—Ç–Ω–∏—Ü—É {photo_name}! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {votes}")
                
            bot.answer_callback_query(call.id, "–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–æ—Å–∞—Ö –∏ —Ç—Ä–µ–±—É–µ–º–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–ª—è —Ñ–æ—Ç–æ {photo_id}")
            conn.rollback()
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_vote: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

def check_tournament_completion():
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        c.execute("""
            SELECT COUNT(*) 
            FROM photos p, tournament_settings t
            WHERE p.approved = 1 
            AND t.is_active = 1 
            AND p.votes >= t.required_votes
        """)
        
        completed_count = c.fetchone()[0]
        
        if completed_count > 0:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            c.execute("""
                SELECT p.id, p.name, p.file_id, p.media_type, p.votes
                FROM photos p
                WHERE p.approved = 1
                ORDER BY p.votes DESC
                LIMIT 1
            """)
            
            winner = c.fetchone()
            
            if winner:
                winner_id, name, file_id, media_type, votes = winner
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
                c.execute("UPDATE tournament_settings SET is_active = 0 WHERE is_active = 1")
                conn.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
                caption = (f"üéâ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                          f"üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {name}\n"
                          f"üìä –ù–∞–±—Ä–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {votes}")
                          
                if media_type == 'photo':
                    bot.send_photo(ADMIN_ID, file_id, caption=caption)
                else:
                    bot.send_video(ADMIN_ID, file_id, caption=caption)
                    
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_tournament_completion: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = call.from_user.id
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º feedback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        bot.answer_callback_query(call.id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É...", show_alert=False)
        
        if check_subscription(user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
            if user_id not in ALLOWED_USERS:
                ALLOWED_USERS.append(user_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = create_admin_markup() if user_id == ADMIN_ID else create_user_markup()
            
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    parse_mode="HTML",
                    reply_markup=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                bot.send_message(
                    call.message.chat.id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=markup
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
            except Exception as edit_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(
                    call.message.chat.id,
                    "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    parse_mode="HTML",
                    reply_markup=markup
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            bot.answer_callback_query(
                call.id, 
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑.", 
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è timestamp)
            try:
                markup = types.InlineKeyboardMarkup(row_width=1)
                channel_btn = types.InlineKeyboardButton("üëâ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/Simpatia_Liven57")
                check_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
                markup.add(channel_btn)
                markup.add(check_btn)
                
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            except Exception as markup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {markup_error}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_subscription_callback: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_buttons(call):
    try:
        user_id = call.from_user.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if user_id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ call.message –Ω–µ None
        if not call.message:
            logger.error(f"call.message is None –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {call.data}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
        if call.data == "admin_suggestions":
            show_suggestions(call.message)
        elif call.data == "admin_delete":
            show_participants_for_deletion(call.message)
        elif call.data == "admin_stats":
            show_statistics(call.message)
        elif call.data == "admin_tournament_settings":
            show_tournament_settings(call.message)
        elif call.data == "admin_view_all":
            show_all_participants(call.message)
        elif call.data == "admin_export":
            export_database(call.message)
        elif call.data == "admin_restart":
            confirm_restart_bot(call.message)
        elif call.data == "admin_back_to_main":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            markup = create_admin_markup() if user_id == ADMIN_ID else create_user_markup()
            bot.send_message(
                call.message.chat.id,
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=markup
            )
        elif call.data.startswith('admin_header'):
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            bot.answer_callback_query(call.id, "–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {call.data}")
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        bot.answer_callback_query(call.id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_buttons: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        except:
            pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏—Ü
def show_all_participants(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü
        c.execute("""
            SELECT id, name, file_id, media_type, votes
            FROM photos
            WHERE approved = 1
            ORDER BY votes DESC
        """)
        
        participants = c.fetchall()
        
        if not participants:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –≤ —Ç—É—Ä–Ω–∏—Ä–µ")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏—Ü
        bot.send_message(message.chat.id, f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏—Ü: {len(participants)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —É—á–∞—Å—Ç–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        sent_count = 0
        for participant in participants:
            try:
                if len(participant) < 5:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {participant}")
                    continue
                    
                part_id, name, file_id, media_type, votes = participant
                
                if not file_id:
                    logger.error(f"–ü—É—Å—Ç–æ–π file_id –¥–ª—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã #{part_id}")
                    continue
                
                caption = f"üë§ ID: {part_id}\nüë§ –ò–º—è: {name}\nüìä –ì–æ–ª–æ—Å–æ–≤: {votes}"
                
                try:
                    if media_type == 'photo':
                        bot.send_photo(message.chat.id, file_id, caption=caption)
                    else:
                        bot.send_video(message.chat.id, file_id, caption=caption)
                        
                    sent_count += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    time.sleep(0.1)
                except telebot.apihelper.ApiException as api_err:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã #{part_id}: {api_err}")
                    continue
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
                continue
                
        if sent_count == 0 and participants:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_participants: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É—á–∞—Å—Ç–Ω–∏—Ü")
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
def export_database(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
        report_file = "report.txt"
        with open(report_file, "w", encoding="utf-8") as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            f.write("===== –û–¢–ß–ï–¢ –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–• –¢–£–†–ù–ò–†–ê =====\n\n")
            
            # –£—á–∞—Å—Ç–Ω–∏—Ü—ã
            c.execute("SELECT id, name, votes FROM photos WHERE approved = 1 ORDER BY votes DESC")
            participants = c.fetchall()
            f.write(f"–£–ß–ê–°–¢–ù–ò–¶–´ ({len(participants)}):\n")
            f.write("-" * 40 + "\n")
            for p in participants:
                f.write(f"ID: {p[0]}, –ò–º—è: {p[1]}, –ì–æ–ª–æ—Å–æ–≤: {p[2]}\n")
            f.write("\n")
            
            # –ì–æ–ª–æ—Å–∞
            c.execute("SELECT COUNT(*) FROM user_votes")
            votes_count = c.fetchone()[0]
            c.execute("SELECT COUNT(DISTINCT user_id) FROM user_votes")
            voters_count = c.fetchone()[0]
            f.write(f"–ì–û–õ–û–°–ê:\n")
            f.write("-" * 40 + "\n")
            f.write(f"–í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {votes_count}\n")
            f.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å—É—é—â–∏—Ö: {voters_count}\n\n")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            c.execute("SELECT required_votes, tournament_duration, is_active, current_tournament_start FROM tournament_settings ORDER BY id DESC LIMIT 1")
            settings = c.fetchone()
            if settings:
                f.write(f"–ù–ê–°–¢–†–û–ô–ö–ò –¢–£–†–ù–ò–†–ê:\n")
                f.write("-" * 40 + "\n")
                f.write(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≥–æ–ª–æ—Å–æ–≤: {settings[0]}\n")
                f.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∞—Å–æ–≤): {settings[1]}\n")
                f.write(f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if settings[2] else '–ù–µ—Ç'}\n")
                f.write(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {settings[3]}\n\n")
            
            # –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
            f.write(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(report_file, "rb") as f:
            bot.send_document(message.chat.id, f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
            
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(report_file)
        except:
            pass
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_database: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def confirm_restart_bot(message):
    try:
        markup = types.InlineKeyboardMarkup()
        yes_btn = types.InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="confirm_restart_yes")
        no_btn = types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back_to_admin")
        markup.row(yes_btn, no_btn)
        
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_restart_bot: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@bot.callback_query_handler(func=lambda call: call.data == "admin_back_to_admin")
def handle_back_to_admin(call):
    try:
        if call.from_user.id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        admin_command(call.message)
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_admin: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "confirm_restart_yes")
def handle_restart_bot(call):
    try:
        if call.from_user.id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        bot.send_message(call.message.chat.id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        cleanup()
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        bot.answer_callback_query(call.id)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        python = sys.executable
        os.execl(python, python, "restart_bot.py")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_restart_bot: {e}", exc_info=True)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")

# –ú–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
def is_bot_already_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç"""
    global socket_instance
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
        bot_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        bot_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        bot_socket.bind(('localhost', 45678))
        bot_socket.listen(1)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        def cleanup():
            try:
                bot_socket.close()
                logger.info("–°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–∫–µ—Ç–∞: {e}")
        
        atexit.register(cleanup)
        socket_instance = bot_socket
        
        logger.info("–°–æ–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
        return False, bot_socket
    except socket.error as e:
        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω: {e}")
        return True, None

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
is_running, socket_instance = is_bot_already_running()
if is_running:
    logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    print("–û–®–ò–ë–ö–ê: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
    print("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram API
@bot.middleware_handler(update_types=['message', 'callback_query', 'inline_query'])
def global_error_handler(bot_instance, update):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –î–ª—è callback_query –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if update.callback_query:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query: {update.callback_query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.callback_query.from_user.id}")
            
        return update
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ middleware: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
        return update

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
old_process_new_updates = bot.process_new_updates

def safe_process_new_updates(updates):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        old_process_new_updates(updates)
        return True
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}\n{error_details}", exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        try:
            bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{str(e)[:200]}...")
            
            # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ
            for update in updates:
                if hasattr(update, 'callback_query') and update.callback_query:
                    try:
                        bot.answer_callback_query(
                            update.callback_query.id, 
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                        )
                    except:
                        pass
        except:
            pass
        return False

def safe_answer_callback(callback_id, text, show_alert=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.answer_callback_query(callback_id, text, show_alert=show_alert)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback {callback_id}: {e}")
        return False

bot.process_new_updates = safe_process_new_updates

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def safe_send_message(chat_id, text, **kwargs):
    try:
        return bot.send_message(chat_id, text, **kwargs)
    except telebot.apihelper.ApiException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Å–æ–±—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try:
            return bot.send_message(chat_id, text)
        except:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –≤ –±–∞–∑–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü
def show_suggestions(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        c.execute("""
            SELECT id, name, file_id, media_type, suggested_by
            FROM suggestions
            WHERE status = 'pending'
            ORDER BY created_at DESC
        """)
        
        suggestions = c.fetchall()
        
        if not suggestions:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
            markup.add(back_btn)
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        sent_count = 0
        for suggestion in suggestions:
            try:
                if len(suggestion) < 5:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {suggestion}")
                    continue
                    
                suggestion_id, name, file_id, media_type, suggested_by = suggestion
                
                if not file_id:
                    logger.error(f"–ü—É—Å—Ç–æ–π file_id –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{suggestion_id}")
                    continue
                
                markup = types.InlineKeyboardMarkup(row_width=2)
                accept_btn = types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_suggestion_{suggestion_id}")
                reject_btn = types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_suggestion_{suggestion_id}")
                markup.add(accept_btn, reject_btn)
                
                caption = f"üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{suggestion_id}\n\nüë§ –ò–º—è: {name}\nüë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {suggested_by}"
                
                try:
                    if media_type == 'photo':
                        bot.send_photo(message.chat.id, file_id, caption=caption, reply_markup=markup)
                    else:
                        bot.send_video(message.chat.id, file_id, caption=caption, reply_markup=markup)
                        
                    sent_count += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    time.sleep(0.1)
                except telebot.apihelper.ApiException as api_err:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è #{suggestion_id}: {api_err}")
                    continue
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")
                continue
                
        if sent_count == 0 and suggestions:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif sent_count > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
            markup.add(back_btn)
            bot.send_message(message.chat.id, f"üì¨ –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {sent_count}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
            
    except sqlite3.Error as db_err:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ show_suggestions: {db_err}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_suggestions: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def show_participants_for_deletion(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü
        c.execute("""
            SELECT id, name, file_id, media_type, votes
            FROM photos
            WHERE approved = 1
            ORDER BY name
        """)
        
        participants = c.fetchall()
        
        if not participants:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏—Ü –≤ —Ç—É—Ä–Ω–∏—Ä–µ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            markup = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
            markup.add(back_btn)
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏—Ü
        bot.send_message(message.chat.id, f"üìä –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(participants)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —É—á–∞—Å—Ç–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        sent_count = 0
        for participant in participants:
            try:
                if len(participant) < 5:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {participant}")
                    continue
                    
                part_id, name, file_id, media_type, votes = participant
                
                if not file_id:
                    logger.error(f"–ü—É—Å—Ç–æ–π file_id –¥–ª—è —É—á–∞—Å—Ç–Ω–∏—Ü—ã #{part_id}")
                    continue
                
                markup = types.InlineKeyboardMarkup()
                delete_btn = types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_participant_{part_id}")
                markup.add(delete_btn)
                
                caption = f"üë§ ID: {part_id}\nüë§ –ò–º—è: {name}\nüìä –ì–æ–ª–æ—Å–æ–≤: {votes}"
                
                try:
                    if media_type == 'photo':
                        bot.send_photo(message.chat.id, file_id, caption=caption, reply_markup=markup)
                    else:
                        bot.send_video(message.chat.id, file_id, caption=caption, reply_markup=markup)
                        
                    sent_count += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    time.sleep(0.1)
                except telebot.apihelper.ApiException as api_err:
                    logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã #{part_id}: {api_err}")
                    continue
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
                continue
                
        if sent_count == 0 and participants:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_participants_for_deletion: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É—á–∞—Å—Ç–Ω–∏—Ü")
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def show_statistics(message):
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        c.execute("SELECT COUNT(*) FROM photos WHERE approved = 1")
        total_participants = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM suggestions WHERE status = 'pending'")
        pending_suggestions = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM user_votes")
        total_votes = c.fetchone()[0]
        
        c.execute("SELECT COUNT(DISTINCT user_id) FROM user_votes")
        unique_voters = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —É—á–∞—Å—Ç–Ω–∏—Ü
        c.execute("""
            SELECT name, votes FROM photos 
            WHERE approved = 1 
            ORDER BY votes DESC 
            LIMIT 3
        """)
        top_participants = c.fetchall()
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats = (f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞:**\n\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏—Ü: {total_participants}\n"
                f"üìù –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {pending_suggestions}\n"
                f"üó≥ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}\n"
                f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å—É—é—â–∏—Ö: {unique_voters}\n\n")
                
        if top_participants:
            stats += "üèÜ **–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏—Ü—ã:**\n"
            for i, (name, votes) in enumerate(top_participants, 1):
                stats += f"{i}. {name} - {votes} –≥–æ–ª–æ—Å–æ–≤\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        
        bot.send_message(message.chat.id, stats, parse_mode="Markdown", reply_markup=markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_statistics: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞
def show_tournament_settings(message):
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
        c.execute("""
            SELECT required_votes, tournament_duration, is_active
            FROM tournament_settings
            WHERE is_active = 1
        """)
        
        settings = c.fetchone()
        
        if not settings:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            c.execute("""
                SELECT required_votes, tournament_duration, is_active
                FROM tournament_settings
                ORDER BY id DESC
                LIMIT 1
            """)
            settings = c.fetchone()
            
        if not settings:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            required_votes = 15  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 100 –Ω–∞ 15
            duration = 24
            is_active = False
        else:
            required_votes, duration, is_active = settings
            
        conn.close()
            
        markup = types.InlineKeyboardMarkup(row_width=2)
        votes_btn = types.InlineKeyboardButton("üó≥ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤", callback_data="set_votes")
        time_btn = types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="set_time")
        
        if is_active:
            status_btn = types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="stop_tournament")
        else:
            status_btn = types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="start_tournament")
        
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
            
        markup.add(votes_btn, time_btn)
        markup.add(status_btn)
        markup.add(back_btn)
        
        settings_text = (f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:\n\n"
                        f"üó≥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≥–æ–ª–æ—Å–æ–≤: {required_votes}\n"
                        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á–∞—Å–æ–≤\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}")
                        
        bot.send_message(message.chat.id, settings_text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tournament_settings: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞")

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏—Ü
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_participant_'))
def handle_participant_deletion(call):
    conn = None
    try:
        user_id = call.from_user.id
        
        if user_id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        participant_id = int(call.data.split('_')[2])
        
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏—Ü–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        c.execute("SELECT name FROM photos WHERE id = ?", (participant_id,))
        participant = c.fetchone()
        
        if not participant:
            bot.answer_callback_query(call.id, "–£—á–∞—Å—Ç–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        participant_name = participant[0]
        
        # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏—Ü—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        c.execute("DELETE FROM user_votes WHERE photo_id = ?", (participant_id,))
        c.execute("DELETE FROM photos WHERE id = ?", (participant_id,))
        conn.commit()
        
        # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
        
        bot.send_message(call.message.chat.id, f"‚úÖ –£—á–∞—Å—Ç–Ω–∏—Ü–∞ {participant_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        bot.answer_callback_query(call.id, f"–£—á–∞—Å—Ç–Ω–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã")
        if conn:
            conn.rollback()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_participant_deletion: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—É—Ä–Ω–∏—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data in ['set_votes', 'set_time', 'start_tournament', 'stop_tournament'])
def handle_tournament_settings(call):
    try:
        user_id = call.from_user.id
        
        if user_id != ADMIN_ID:
            bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return
            
        if call.data == 'set_votes':
            set_user_state(user_id, UserStates.WAITING_VOTES_COUNT)
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤:")
            
        elif call.data == 'set_time':
            set_user_state(user_id, UserStates.WAITING_TOURNAMENT_TIME)
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —á–∞—Å–∞—Ö:")
            
        elif call.data == 'start_tournament':
            start_new_tournament(call.message)
            
        elif call.data == 'stop_tournament':
            stop_tournament(call.message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_tournament_settings: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞
def start_new_tournament(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
        c.execute("SELECT id FROM tournament_settings WHERE is_active = 1")
        if c.fetchone():
            bot.reply_to(message, "üö´ –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏—Ü—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
        c.execute("SELECT COUNT(*) FROM photos WHERE approved = 1")
        participants_count = c.fetchone()[0]
        
        if participants_count < 2:
            bot.reply_to(message, "‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏—Ü—ã")
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
        c.execute("""
            INSERT INTO tournament_settings (required_votes, tournament_duration, is_active, current_tournament_start)
            VALUES (?, ?, 1, CURRENT_TIMESTAMP)
        """, (15, 24))  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 15 –≥–æ–ª–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        conn.commit()
        bot.reply_to(message, f"‚úÖ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω!\nüë• –£—á–∞—Å—Ç–Ω–∏—Ü: {participants_count}\nüó≥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã: 15")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ start_new_tournament: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞")
        if conn:
            conn.rollback()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_new_tournament: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
def stop_tournament(message):
    conn = None
    try:
        conn = sqlite3.connect('facemash.db')
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        c.execute("""
            SELECT t.id, t.required_votes,
                   (SELECT COUNT(*) FROM photos p WHERE p.approved = 1) as total_participants,
                   (SELECT COUNT(*) FROM user_votes) as total_votes
            FROM tournament_settings t
            WHERE t.is_active = 1
        """)
        
        tournament_info = c.fetchone()
        
        if not tournament_info:
            bot.reply_to(message, "üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞")
            return
            
        tournament_id, required_votes, total_participants, total_votes = tournament_info
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        c.execute("UPDATE tournament_settings SET is_active = 0 WHERE id = ?", (tournament_id,))
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—É—Ä–Ω–∏—Ä–∞
        stats = (f"üèÅ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏—Ü: {total_participants}\n"
                f"üó≥ –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}\n"
                f"‚≠ê –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤: {required_votes}")
                
        bot.reply_to(message, stats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        markup = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_admin")
        markup.add(back_btn)
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ stop_tournament: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞")
        if conn:
            conn.rollback()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stop_tournament: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()

def handle_user_state(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        user_id = message.from_user.id
        current_state = get_user_state(user_id)
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if current_state == UserStates.WAITING_NAME:
            handle_name(message)
        elif current_state == UserStates.WAITING_VOTES_COUNT:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
            try:
                votes = int(message.text.strip())
                if votes < 1 or votes > 1000:
                    bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000.")
                    return
                    
                user_data[user_id]['votes_count'] = votes
                set_user_state(user_id, UserStates.WAITING_TOURNAMENT_TIME)
                
                bot.send_message(
                    message.chat.id, 
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 168):"
                )
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        elif current_state == UserStates.WAITING_TOURNAMENT_TIME:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä–∞
            try:
                hours = int(message.text.strip())
                if hours < 1 or hours > 168:
                    bot.send_message(message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤.")
                    return
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
                conn = sqlite3.connect(DB_NAME)
                cursor = conn.cursor()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
                cursor.execute(
                    "UPDATE tournament_settings SET required_votes = ?, duration_hours = ? WHERE active = 1",
                    (user_data[user_id]['votes_count'], hours)
                )
                conn.commit()
                conn.close()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                set_user_state(user_id, UserStates.START)
                
                bot.send_message(
                    message.chat.id, 
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                    f"‚Ä¢ –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {user_data[user_id]['votes_count']}\n"
                    f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞: {hours} —á–∞—Å–æ–≤",
                    reply_markup=create_admin_markup()
                )
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")
            set_user_state(user_id, UserStates.START)
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_state: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞
def signal_handler(signal, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        bot.remove_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)

def setup_webhook(url, retry_count=0, max_retries=5):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
        try:
            info = bot.get_webhook_info()
            current_url = info.url
            
            # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω—É–∂–Ω—ã–π URL, –Ω–µ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if current_url == url:
                logger.info(f"–í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}")
                return
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–µ–±—Ö—É–∫–µ: {e}")
            
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        bot.remove_webhook()
        time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        bot.set_webhook(url=url)
        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        if "Too Many Requests" in str(e) and retry_count < max_retries:
            retry_after = 1
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ retry_after –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if "retry after" in str(e):
                try:
                    retry_after = int(str(e).split("retry after ")[1])
                except:
                    retry_after = (retry_count + 1) * 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥...")
            time.sleep(retry_after)
            setup_webhook(url, retry_count + 1, max_retries)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
            logger.error(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL –≤–µ–±—Ö—É–∫–∞: {url}")

def check_and_restore_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        info = bot.get_webhook_info()
        logger.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: URL={info.url}, pending_updates={info.pending_update_count}")
        
        # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if not info.url:
            logger.warning("–í–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Ä—É—á–Ω—É—é...")
            # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            host = os.environ.get('WEBHOOK_HOST', os.environ.get('RENDER_EXTERNAL_URL', ''))
            path = os.environ.get('WEBHOOK_PATH', f'/webhook/{bot.token}')
            if host:
                # –£–±–∏—Ä–∞–µ–º trailing slash –µ—Å–ª–∏ –µ—Å—Ç—å
                if host.endswith('/'):
                    host = host[:-1]
                
                url = f"{host}{path}"
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ URL: {url}")
                setup_webhook(url)
                return True
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_HOST –∏–ª–∏ RENDER_EXTERNAL_URL")
                return False
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return False

if __name__ == "__main__":
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        init_db()
        
        # –ì–ª–∞–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        mode = os.environ.get('MODE', 'polling').lower()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é polling
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
        USE_SSL = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        SSL_CERT = None
        SSL_KEY = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è keep-alive –¥–ª—è Render, –µ—Å–ª–∏ –º—ã –≤ –≤–µ–±-—Ä–µ–∂–∏–º–µ
        if mode == 'webhook' and os.environ.get('RENDER_EXTERNAL_URL'):
            from keep_alive import start_keep_alive_thread
            keep_alive_thread = start_keep_alive_thread()
            logger.info("–ó–∞–ø—É—â–µ–Ω keep-alive —Å–µ—Ä–≤–∏—Å –¥–ª—è Render")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
        if mode == 'webhook':
            # –†–µ–∂–∏–º webhook - –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            from flask import Flask, request
            app = Flask(__name__)
            
            WEBHOOK_HOST = os.environ.get('WEBHOOK_HOST', '')
            WEBHOOK_PORT = int(os.environ.get('PORT', 5000))
            WEBHOOK_PATH = os.environ.get('WEBHOOK_PATH', f'/webhook/{bot.token}')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if os.environ.get('RENDER_EXTERNAL_URL'):
                render_url = os.environ.get('RENDER_EXTERNAL_URL')
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
                if not render_url.startswith('http'):
                    render_url = f"https://{render_url}"
                
                WEBHOOK_URL = render_url + WEBHOOK_PATH
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL Render: {WEBHOOK_URL}")
            elif os.environ.get('RAILWAY_PUBLIC_DOMAIN') or os.environ.get('RAILWAY_STATIC_URL'):
                # –î–ª—è Railway —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                railway_url = os.environ.get('RAILWAY_PUBLIC_DOMAIN', '') or os.environ.get('RAILWAY_STATIC_URL', '')
                if not railway_url.startswith('http'):
                    railway_url = f"https://{railway_url}"
                
                WEBHOOK_URL = railway_url + WEBHOOK_PATH
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL Railway: {WEBHOOK_URL}")
            else:
                # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                if not WEBHOOK_HOST:
                    logger.warning("WEBHOOK_HOST –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    WEBHOOK_HOST = f"https://example.com"
                
                WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL: {WEBHOOK_URL}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –≤–µ–±—Ö—É–∫–∞
            if not WEBHOOK_URL.startswith('https://'):
                logger.error(f"URL –≤–µ–±—Ö—É–∫–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://: {WEBHOOK_URL}")
                WEBHOOK_URL = f"https://{WEBHOOK_URL.replace('http://', '')}"
                logger.info(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
            
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ {WEBHOOK_URL}")
            
            try:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫
                bot.remove_webhook()
                time.sleep(0.2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: {WEBHOOK_URL}")
                setup_webhook(WEBHOOK_URL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
                logger.error(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
        IS_HEROKU = os.environ.get('DYNO') is not None
        IS_PYTHONANYWHERE = 'PYTHONANYWHERE_DOMAIN' in os.environ
        IS_RAILWAY = 'RAILWAY_STATIC_URL' in os.environ
        IS_RENDER = 'RENDER_EXTERNAL_URL' in os.environ
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (webhook/polling)
        USE_WEBHOOK = os.environ.get('USE_WEBHOOK', 'False').lower() in ('true', '1', 't')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webhook
        if USE_WEBHOOK or IS_HEROKU or IS_PYTHONANYWHERE or IS_RAILWAY or IS_RENDER:
            # –ï—Å–ª–∏ –Ω–∞ Render, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ keep-alive
            if IS_RENDER:
                keep_alive_thread = start_keep_alive_thread()
                logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ keep-alive –¥–ª—è Render")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                webhook_status = check_and_restore_webhook()
                if webhook_status:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    logger.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            
            # –†–µ–∂–∏–º webhook - –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
            import flask
            from flask import Flask, request
            app = Flask(__name__)
            
            # URL –¥–ª—è webhook –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if IS_RAILWAY:
                # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                WEBHOOK_HOST = os.environ.get('RAILWAY_PUBLIC_DOMAIN', '')
                if not WEBHOOK_HOST:
                    WEBHOOK_HOST = os.environ.get('RAILWAY_STATIC_URL', '')
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
                if WEBHOOK_HOST and not WEBHOOK_HOST.startswith('http'):
                    WEBHOOK_HOST = f"https://{WEBHOOK_HOST}"
                
                logger.info(f"Railway host: {WEBHOOK_HOST}")
            elif IS_RENDER:
                # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL
                WEBHOOK_HOST = os.environ.get('RENDER_EXTERNAL_URL', '')
                logger.info(f"Render host: {WEBHOOK_HOST}")
            else:
                WEBHOOK_HOST = os.environ.get('WEBHOOK_HOST', 'https://your-app-name.herokuapp.com')
            
            WEBHOOK_PATH = os.environ.get('WEBHOOK_PATH', f'/webhook/{bot.token}')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞
            if WEBHOOK_HOST:
                WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
                logger.info(f"–§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
            else:
                logger.error("WEBHOOK_HOST –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
                WEBHOOK_URL = f"https://example.com{WEBHOOK_PATH}"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            bot.remove_webhook()
            
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
                logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: {WEBHOOK_URL}")
                setup_webhook(WEBHOOK_URL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
                logger.error(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
                # –ü—Ä–æ–¥–æ–ª–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ö–æ—Ç—è –±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
                pass
            
            @app.route(WEBHOOK_PATH, methods=['POST'])
            def webhook():
                logger.info("–ü–æ–ª—É—á–µ–Ω webhook-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram")
                if request.headers.get('content-type') == 'application/json':
                    json_string = request.get_data().decode('utf-8')
                    logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ webhook-–∑–∞–ø—Ä–æ—Å–∞: {json_string[:100]}...")
                    try:
                        update = telebot.types.Update.de_json(json_string)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        if hasattr(update, 'callback_query') and update.callback_query:
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query —Å data: {update.callback_query.data}")
                        elif hasattr(update, 'message') and update.message:
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {update.message.content_type}")
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                        try:
                            bot.process_new_updates([update])
                            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: {update.message.content_type if hasattr(update, 'message') and update.message else '–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º middleware –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                            if hasattr(bot, 'middleware_handler'):
                                bot.middleware_handler.process_update([update])
                        
                        return ''
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook-–∑–∞–ø—Ä–æ—Å–∞: {e}")
                        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ' + str(e), 500
                else:
                    logger.warning(f"–ü–æ–ª—É—á–µ–Ω webhook-–∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º content-type: {request.headers.get('content-type')}")
                    return '–û—à–∏–±–∫–∞: –Ω–µ JSON', 403
            
            @app.route('/')
            def index():
                return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            
            # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
            PORT = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=PORT)
        else:
            # –†–µ–∂–∏–º polling - –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
            already_running, socket_instance = is_bot_already_running()
            if not already_running:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                bot.remove_webhook()
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
                logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
                bot.infinity_polling(timeout=10, long_polling_timeout=5, allowed_updates=None)
            else:
                logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                print("–û–®–ò–ë–ö–ê: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ!")
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ restart_bot.py –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
                sys.exit(1)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        traceback.print_exc()
   
